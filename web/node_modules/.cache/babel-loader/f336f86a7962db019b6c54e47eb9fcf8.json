{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/ismailhashi/Projects/summarizer/frontend/src/views/Home/components/Todo/ContentList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { InputBase, Checkbox, IconButton, useTheme } from \"@material-ui/core\";\nimport { AddOutlined as AddIcon, CheckBoxOutlineBlankOutlined as CheckboxBlankIcon, CheckBoxOutlined as CheckboxIcon, CloseOutlined as CloseIcon } from \"@material-ui/icons\";\nconst useStyles = makeStyles(theme => ({\n  itemContainerWithBorder: {\n    borderStyle: \"solid\",\n    borderWidth: `${theme.spacing(0.1)}px 0 ${theme.spacing(0.1)}px 0`,\n    borderColor: theme.palette.divider\n  },\n  itemContainerWithoutBorder: {\n    borderStyle: \"solid\",\n    borderWidth: `${theme.spacing(0.1)}px 0 ${theme.spacing(0.1)}px 0`,\n    borderColor: \"transparent\"\n  },\n  itemWrapper: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignContent: \"center\",\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(1),\n    minHeight: theme.spacing(4)\n  },\n  inputRoot: {\n    flex: 1\n  },\n  checkboxRoot: {\n    margin: `auto ${theme.spacing(1.5)}px`,\n    padding: \"0 !important\",\n    color: `${theme.custom.palette.notesCheckbox} !important`\n  },\n  textEmpty: { ...theme.custom.fontFamily.metropolis,\n    fontWeight: 500,\n    fontSize: \"0.875rem\",\n    verticalAlign: \"middle\"\n  },\n  textIncomplete: {\n    fontWeight: 400,\n    fontSize: \"0.875rem\",\n    verticalAlign: \"middle\"\n  },\n  textComplete: {\n    textDecoration: \"line-through\",\n    textDecorationColor: theme.palette.text.secondary,\n    fontWeight: 400,\n    fontSize: \"0.875rem\",\n    verticalAlign: \"middle\"\n  },\n  closeButtonWrapper: {\n    margin: \"auto 0\"\n  }\n}));\nexport default function ({\n  notes,\n  setNotes,\n  isEditMode\n}) {\n  const onTextChange = (index, text) => {\n    const updatedNoteItems = Object.assign([], notes);\n    updatedNoteItems[index].text = text;\n    setNotes(updatedNoteItems);\n  };\n\n  const onMarkCompleted = (index, isCompleted) => {\n    const updatedNoteItems = Object.assign([], notes);\n    updatedNoteItems[index].isCompleted = isCompleted;\n    setNotes(updatedNoteItems);\n  };\n\n  const onDeletePressed = index => {\n    const updatedNoteItems = Object.assign([], notes);\n    updatedNoteItems.splice(index, 1);\n    setNotes(updatedNoteItems);\n  };\n\n  const onKeyPressed = (index, event) => {\n    if (event.keyCode === 13) {\n      // Enter pressed, create a new row item\n      event.preventDefault();\n      var updatedNoteItems = Object.assign([], notes);\n      updatedNoteItems = updatedNoteItems.filter(note => note.text !== \"\");\n      updatedNoteItems.splice(index + 1, 0, {\n        text: \"\",\n        isCompleted: false\n      });\n      setNotes(updatedNoteItems);\n    }\n  };\n\n  if (notes.length === 0) {\n    notes = [{\n      text: \"\",\n      isCompleted: false\n    }];\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: notes.map(({\n      text,\n      isCompleted\n    }, index) => /*#__PURE__*/_jsxDEV(ContentListItem, {\n      index: index,\n      text: text,\n      isCompleted: isCompleted,\n      isEditMode: isEditMode,\n      onTextChange: onTextChange,\n      onMarkCompleted: onMarkCompleted,\n      onDeletePressed: onDeletePressed,\n      onKeyPressed: onKeyPressed\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this))\n  }, void 0, false);\n}\n\nfunction ContentListItem({\n  index,\n  text,\n  isCompleted,\n  isEditMode,\n  onTextChange,\n  onMarkCompleted,\n  onDeletePressed,\n  onKeyPressed\n}) {\n  _s();\n\n  const classes = useStyles();\n  const theme = useTheme();\n  const [isFocussed, setFocussed] = useState(false);\n  const [isHovered, setHovered] = useState(false);\n  const isEmpty = text === \"\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: isFocussed ? classes.itemContainerWithBorder : classes.itemContainerWithoutBorder,\n    onMouseEnter: () => setHovered(true),\n    onMouseLeave: () => setHovered(false),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.itemWrapper,\n      children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n        icon: isEmpty && isEditMode ? /*#__PURE__*/_jsxDEV(AddIcon, {\n          fontSize: \"small\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(CheckboxBlankIcon, {\n          fontSize: \"small\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 17\n        }, this),\n        checkedIcon: /*#__PURE__*/_jsxDEV(CheckboxIcon, {\n          fontSize: \"small\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 24\n        }, this),\n        color: \"default\",\n        checked: isCompleted,\n        disabled: !isEditMode || isEmpty,\n        classes: {\n          root: classes.checkboxRoot\n        },\n        onChange: event => onMarkCompleted(index, event.target.checked)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputBase, {\n        classes: {\n          root: classes.inputRoot,\n          input: isEmpty ? classes.textEmpty : isCompleted ? classes.textComplete : classes.textIncomplete\n        },\n        value: text,\n        placeholder: isEditMode ? \"List Item\" : \"\",\n        onChange: event => onTextChange(index, event.target.value),\n        onKeyDown: event => onKeyPressed(index, event),\n        onFocus: () => setFocussed(true),\n        onBlur: () => setFocussed(true),\n        autoFocus: isEmpty,\n        readOnly: !isEditMode,\n        multiline: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), isEditMode ? isHovered ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.closeButtonWrapper,\n        children: /*#__PURE__*/_jsxDEV(IconButton, {\n          size: \"small\",\n          onClick: () => onDeletePressed(index),\n          children: /*#__PURE__*/_jsxDEV(CloseIcon, {\n            htmlColor: theme.custom.palette.iconColor,\n            fontSize: \"small\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"26px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 15\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ContentListItem, \"0kzybDCLzxQK5yJ8busMiJkjanQ=\", false, function () {\n  return [useStyles, useTheme];\n});\n\n_c = ContentListItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContentListItem\");","map":{"version":3,"sources":["/Users/ismailhashi/Projects/summarizer/frontend/src/views/Home/components/Todo/ContentList.js"],"names":["React","useState","makeStyles","InputBase","Checkbox","IconButton","useTheme","AddOutlined","AddIcon","CheckBoxOutlineBlankOutlined","CheckboxBlankIcon","CheckBoxOutlined","CheckboxIcon","CloseOutlined","CloseIcon","useStyles","theme","itemContainerWithBorder","borderStyle","borderWidth","spacing","borderColor","palette","divider","itemContainerWithoutBorder","itemWrapper","display","flexDirection","alignContent","marginLeft","marginRight","minHeight","inputRoot","flex","checkboxRoot","margin","padding","color","custom","notesCheckbox","textEmpty","fontFamily","metropolis","fontWeight","fontSize","verticalAlign","textIncomplete","textComplete","textDecoration","textDecorationColor","text","secondary","closeButtonWrapper","notes","setNotes","isEditMode","onTextChange","index","updatedNoteItems","Object","assign","onMarkCompleted","isCompleted","onDeletePressed","splice","onKeyPressed","event","keyCode","preventDefault","filter","note","length","map","ContentListItem","classes","isFocussed","setFocussed","isHovered","setHovered","isEmpty","root","target","checked","input","value","iconColor","width"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  InputBase,\n  Checkbox,\n  IconButton,\n  useTheme\n} from \"@material-ui/core\";\nimport {\n  AddOutlined as AddIcon,\n  CheckBoxOutlineBlankOutlined as CheckboxBlankIcon,\n  CheckBoxOutlined as CheckboxIcon,\n  CloseOutlined as CloseIcon\n} from \"@material-ui/icons\";\n\nconst useStyles = makeStyles(theme => ({\n  itemContainerWithBorder: {\n    borderStyle: \"solid\",\n    borderWidth: `${theme.spacing(0.1)}px 0 ${theme.spacing(0.1)}px 0`,\n    borderColor: theme.palette.divider\n  },\n  itemContainerWithoutBorder: {\n    borderStyle: \"solid\",\n    borderWidth: `${theme.spacing(0.1)}px 0 ${theme.spacing(0.1)}px 0`,\n    borderColor: \"transparent\"\n  },\n  itemWrapper: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignContent: \"center\",\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(1),\n    minHeight: theme.spacing(4)\n  },\n  inputRoot: {\n    flex: 1\n  },\n  checkboxRoot: {\n    margin: `auto ${theme.spacing(1.5)}px`,\n    padding: \"0 !important\",\n    color: `${theme.custom.palette.notesCheckbox} !important`\n  },\n  textEmpty: {\n    ...theme.custom.fontFamily.metropolis,\n    fontWeight: 500,\n    fontSize: \"0.875rem\",\n    verticalAlign: \"middle\"\n  },\n  textIncomplete: {\n    fontWeight: 400,\n    fontSize: \"0.875rem\",\n    verticalAlign: \"middle\"\n  },\n  textComplete: {\n    textDecoration: \"line-through\",\n    textDecorationColor: theme.palette.text.secondary,\n    fontWeight: 400,\n    fontSize: \"0.875rem\",\n    verticalAlign: \"middle\"\n  },\n  closeButtonWrapper: {\n    margin: \"auto 0\"\n  }\n}));\n\nexport default function ({ notes, setNotes, isEditMode }) {\n  const onTextChange = (index, text) => {\n    const updatedNoteItems = Object.assign([], notes);\n    updatedNoteItems[index].text = text;\n    setNotes(updatedNoteItems);\n  };\n  const onMarkCompleted = (index, isCompleted) => {\n    const updatedNoteItems = Object.assign([], notes);\n    updatedNoteItems[index].isCompleted = isCompleted;\n    setNotes(updatedNoteItems);\n  };\n  const onDeletePressed = index => {\n    const updatedNoteItems = Object.assign([], notes);\n    updatedNoteItems.splice(index, 1);\n    setNotes(updatedNoteItems);\n  };\n  const onKeyPressed = (index, event) => {\n    if (event.keyCode === 13) { // Enter pressed, create a new row item\n      event.preventDefault();\n      var updatedNoteItems = Object.assign([], notes);\n      updatedNoteItems = updatedNoteItems.filter(note => note.text !== \"\")\n      updatedNoteItems.splice(index + 1, 0, { text: \"\", isCompleted: false });\n      setNotes(updatedNoteItems);\n    }\n  };\n\n  if (notes.length === 0) {\n    notes = [{ text: \"\", isCompleted: false }]\n  }\n\n  return (\n    <>\n      {notes.map(({ text, isCompleted }, index) => (\n        <ContentListItem\n          key={index}\n          index={index}\n          text={text}\n          isCompleted={isCompleted}\n          isEditMode={isEditMode}\n          onTextChange={onTextChange}\n          onMarkCompleted={onMarkCompleted}\n          onDeletePressed={onDeletePressed}\n          onKeyPressed={onKeyPressed}\n        />\n      ))}\n    </>\n  );\n}\n\nfunction ContentListItem({\n  index,\n  text,\n  isCompleted,\n  isEditMode,\n  onTextChange,\n  onMarkCompleted,\n  onDeletePressed,\n  onKeyPressed\n}) {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [isFocussed, setFocussed] = useState(false);\n  const [isHovered, setHovered] = useState(false);\n  const isEmpty = text === \"\";\n  return (\n    <div\n      className={\n        isFocussed\n          ? classes.itemContainerWithBorder\n          : classes.itemContainerWithoutBorder\n      }\n      onMouseEnter={() => setHovered(true)}\n      onMouseLeave={() => setHovered(false)}\n    >\n      <div className={classes.itemWrapper}>\n        <Checkbox\n          icon={\n            (isEmpty && isEditMode) ? (\n              <AddIcon fontSize=\"small\" />\n            ) : (\n                <CheckboxBlankIcon fontSize=\"small\" />\n              )\n          }\n          checkedIcon={<CheckboxIcon fontSize=\"small\" />}\n          color=\"default\"\n          checked={isCompleted}\n          disabled={!isEditMode || isEmpty}\n          classes={{ root: classes.checkboxRoot }}\n          onChange={event => onMarkCompleted(index, event.target.checked)}\n        />\n        <InputBase\n          classes={{\n            root: classes.inputRoot,\n            input: isEmpty\n              ? classes.textEmpty\n              : isCompleted\n                ? classes.textComplete\n                : classes.textIncomplete\n          }}\n          value={text}\n          placeholder={isEditMode ? \"List Item\" : \"\"}\n          onChange={event => onTextChange(index, event.target.value)}\n          onKeyDown={event => onKeyPressed(index, event)}\n          onFocus={() => setFocussed(true)}\n          onBlur={() => setFocussed(true)}\n          autoFocus={isEmpty}\n          readOnly={!isEditMode}\n          multiline={true}\n        />\n        {isEditMode ? (\n          isHovered ? (\n            <div className={classes.closeButtonWrapper}>\n              <IconButton size=\"small\" onClick={() => onDeletePressed(index)}>\n                <CloseIcon htmlColor={theme.custom.palette.iconColor} fontSize=\"small\" />\n              </IconButton>\n            </div>\n          ) : (\n              <div style={{ width: \"26px\" }} />\n            )\n        ) : null}\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}