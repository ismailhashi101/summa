{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/ismailhashi/Projects/summarizer/frontend/src/views/Home/components/Todo/LabelPopover.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Popover, List, ListItem, ListItemIcon, ListItemText, Checkbox, Typography, InputBase, Divider, Button, useTheme } from \"@material-ui/core\";\nimport { CheckBoxOutlineBlankOutlined as CheckboxBlankIcon, CheckBoxOutlined as CheckboxIcon, AddOutlined as AddIcon, SearchOutlined as SearchIcon } from \"@material-ui/icons\"; // import { useMutation } from \"urql\";\n// import { createLabel } from \"../../gql\";\n// import { useLabelsStore } from \"../../store\";\n\nconst useStyles = makeStyles(theme => ({\n  popover: {\n    width: theme.spacing(28),\n    borderRadius: theme.spacing(0.5),\n    background: theme.palette.background.default\n  },\n  container: {\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n  header: {\n    padding: theme.spacing(1.5, 1.5, 0, 1.5),\n    marginBottom: theme.spacing(-1)\n  },\n  searchInput: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\"\n  },\n  inputText: { ...theme.custom.fontFamily.roboto,\n    fontWeight: 400,\n    fontSize: \"0.8rem\",\n    flex: 1\n  },\n  listItemIconRoot: {\n    margin: \"0 !important\",\n    padding: \"0 !important\",\n    minWidth: \"0px\"\n  },\n  checkboxRoot: {\n    margin: `${theme.spacing(0.5)}px ${theme.spacing(1)}px ${theme.spacing(0.5)}px ${theme.spacing(1.5)}px !important`,\n    padding: \"0 !important\"\n  },\n  listItemText: { ...theme.custom.fontFamily.roboto,\n    fontWeight: 400,\n    fontSize: \"0.8rem\"\n  },\n  footer: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    padding: theme.spacing(0.8, 1.5, 0.8, 1.5),\n    borderRadius: 0,\n    justifyContent: \"left\"\n  },\n  footerText: { ...theme.custom.fontFamily.roboto,\n    fontWeight: 400,\n    fontSize: \"0.8rem\",\n    paddingLeft: theme.spacing(1),\n    textTransform: \"none\"\n  }\n}));\nexport default function LabelPopover({\n  anchorEl,\n  labels,\n  setLabels,\n  isOpen,\n  onClose\n}) {\n  _s();\n\n  const classes = useStyles();\n  const theme = useTheme();\n  const popoverId = isOpen ? \"color-popover\" : undefined;\n  const [newLabelName, setNewLabelName] = useState(\"\"); // const [allLabelItems, dispatchLabel] = useLabelsStore();\n  // const filteredLabelItems = allLabelItems.filter(labelItem =>\n  //   newLabelName === \"\" || labelItem.name.includes(newLabelName)\n  // );\n  // const [, createLabelExecute] = useMutation(createLabel);\n  // const updateLabelsForNote = (labelItem) => {\n  //   const updatedLabelIndex = labels.findIndex(selectedLabel => selectedLabel.id === labelItem.id);\n  //   if (updatedLabelIndex > -1) {\n  //     labels.splice(updatedLabelIndex, 1);\n  //   } else {\n  //     labels.push(labelItem);\n  //   }\n  //   setLabels(Object.assign([], labels));\n  // };\n  // const onCreateTodoClick = () => {\n  //   createLabelExecute({ name: newLabelName }).then(({ data }) => {\n  //     dispatchLabel({ type: \"CREATED\", payload: data.createLabel });\n  //   });\n  //   setNewLabelName(\"\");\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Popover, {\n      id: popoverId,\n      open: isOpen,\n      anchorEl: anchorEl,\n      onClose: onClose,\n      anchorOrigin: {\n        vertical: \"bottom\",\n        horizontal: \"right\"\n      },\n      transformOrigin: {\n        vertical: \"top\",\n        horizontal: \"left\"\n      },\n      classes: {\n        paper: classes.popover\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.container,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.header,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle2\",\n            children: \"Label note\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.searchInput,\n            children: [/*#__PURE__*/_jsxDEV(InputBase, {\n              classes: {\n                root: classes.inputText\n              },\n              placeholder: \"Enter label name\",\n              value: newLabelName,\n              onChange: event => setNewLabelName(event.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(SearchIcon, {\n              fontSize: \"small\",\n              htmlColor: theme.palette.grey[500]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(List, {\n          dense: true,\n          component: \"div\",\n          style: {\n            width: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this), newLabelName !== \"\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            size: \"small\",\n            classes: {\n              root: classes.footer\n            },\n            children: [/*#__PURE__*/_jsxDEV(AddIcon, {\n              fontSize: \"small\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              classes: {\n                root: classes.footerText\n              },\n              children: [\"Create \\\"\", /*#__PURE__*/_jsxDEV(\"b\", {\n                children: newLabelName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 188,\n                columnNumber: 27\n              }, this), \"\\\"\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n}\n\n_s(LabelPopover, \"c3SymlGbyXaimaZm1jsb5NtVXnY=\", false, function () {\n  return [useStyles, useTheme];\n});\n\n_c = LabelPopover;\n\nvar _c;\n\n$RefreshReg$(_c, \"LabelPopover\");","map":{"version":3,"sources":["/Users/ismailhashi/Projects/summarizer/frontend/src/views/Home/components/Todo/LabelPopover.js"],"names":["React","useState","makeStyles","Popover","List","ListItem","ListItemIcon","ListItemText","Checkbox","Typography","InputBase","Divider","Button","useTheme","CheckBoxOutlineBlankOutlined","CheckboxBlankIcon","CheckBoxOutlined","CheckboxIcon","AddOutlined","AddIcon","SearchOutlined","SearchIcon","useStyles","theme","popover","width","spacing","borderRadius","background","palette","default","container","display","flexDirection","header","padding","marginBottom","searchInput","alignItems","inputText","custom","fontFamily","roboto","fontWeight","fontSize","flex","listItemIconRoot","margin","minWidth","checkboxRoot","listItemText","footer","justifyContent","footerText","paddingLeft","textTransform","LabelPopover","anchorEl","labels","setLabels","isOpen","onClose","classes","popoverId","undefined","newLabelName","setNewLabelName","vertical","horizontal","paper","root","event","target","value","grey"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SACEC,OADF,EAEEC,IAFF,EAGEC,QAHF,EAIEC,YAJF,EAKEC,YALF,EAMEC,QANF,EAOEC,UAPF,EAQEC,SARF,EASEC,OATF,EAUEC,MAVF,EAWEC,QAXF,QAYO,mBAZP;AAaA,SACEC,4BAA4B,IAAIC,iBADlC,EAEEC,gBAAgB,IAAIC,YAFtB,EAGEC,WAAW,IAAIC,OAHjB,EAIEC,cAAc,IAAIC,UAJpB,QAKO,oBALP,C,CAMA;AACA;AACA;;AAEA,MAAMC,SAAS,GAAGpB,UAAU,CAACqB,KAAK,KAAK;AACrCC,EAAAA,OAAO,EAAE;AACPC,IAAAA,KAAK,EAAEF,KAAK,CAACG,OAAN,CAAc,EAAd,CADA;AAEPC,IAAAA,YAAY,EAAEJ,KAAK,CAACG,OAAN,CAAc,GAAd,CAFP;AAGPE,IAAAA,UAAU,EAAEL,KAAK,CAACM,OAAN,CAAcD,UAAd,CAAyBE;AAH9B,GAD4B;AAMrCC,EAAAA,SAAS,EAAE;AACTC,IAAAA,OAAO,EAAE,MADA;AAETC,IAAAA,aAAa,EAAE;AAFN,GAN0B;AAUrCC,EAAAA,MAAM,EAAE;AACNC,IAAAA,OAAO,EAAEZ,KAAK,CAACG,OAAN,CAAc,GAAd,EAAmB,GAAnB,EAAwB,CAAxB,EAA2B,GAA3B,CADH;AAENU,IAAAA,YAAY,EAAEb,KAAK,CAACG,OAAN,CAAc,CAAC,CAAf;AAFR,GAV6B;AAcrCW,EAAAA,WAAW,EAAE;AACXL,IAAAA,OAAO,EAAE,MADE;AAEXC,IAAAA,aAAa,EAAE,KAFJ;AAGXK,IAAAA,UAAU,EAAE;AAHD,GAdwB;AAmBrCC,EAAAA,SAAS,EAAE,EACT,GAAGhB,KAAK,CAACiB,MAAN,CAAaC,UAAb,CAAwBC,MADlB;AAETC,IAAAA,UAAU,EAAE,GAFH;AAGTC,IAAAA,QAAQ,EAAE,QAHD;AAITC,IAAAA,IAAI,EAAE;AAJG,GAnB0B;AAyBrCC,EAAAA,gBAAgB,EAAE;AAChBC,IAAAA,MAAM,EAAE,cADQ;AAEhBZ,IAAAA,OAAO,EAAE,cAFO;AAGhBa,IAAAA,QAAQ,EAAE;AAHM,GAzBmB;AA8BrCC,EAAAA,YAAY,EAAE;AACZF,IAAAA,MAAM,EAAG,GAAExB,KAAK,CAACG,OAAN,CAAc,GAAd,CAAmB,MAAKH,KAAK,CAACG,OAAN,CAAc,CAAd,CAAiB,MAAKH,KAAK,CAACG,OAAN,CACvD,GADuD,CAEvD,MAAKH,KAAK,CAACG,OAAN,CAAc,GAAd,CAAmB,eAHd;AAIZS,IAAAA,OAAO,EAAE;AAJG,GA9BuB;AAoCrCe,EAAAA,YAAY,EAAE,EACZ,GAAG3B,KAAK,CAACiB,MAAN,CAAaC,UAAb,CAAwBC,MADf;AAEZC,IAAAA,UAAU,EAAE,GAFA;AAGZC,IAAAA,QAAQ,EAAE;AAHE,GApCuB;AAyCrCO,EAAAA,MAAM,EAAE;AACNnB,IAAAA,OAAO,EAAE,MADH;AAENC,IAAAA,aAAa,EAAE,KAFT;AAGNE,IAAAA,OAAO,EAAEZ,KAAK,CAACG,OAAN,CAAc,GAAd,EAAmB,GAAnB,EAAwB,GAAxB,EAA6B,GAA7B,CAHH;AAINC,IAAAA,YAAY,EAAE,CAJR;AAKNyB,IAAAA,cAAc,EAAE;AALV,GAzC6B;AAgDrCC,EAAAA,UAAU,EAAE,EACV,GAAG9B,KAAK,CAACiB,MAAN,CAAaC,UAAb,CAAwBC,MADjB;AAEVC,IAAAA,UAAU,EAAE,GAFF;AAGVC,IAAAA,QAAQ,EAAE,QAHA;AAIVU,IAAAA,WAAW,EAAE/B,KAAK,CAACG,OAAN,CAAc,CAAd,CAJH;AAKV6B,IAAAA,aAAa,EAAE;AALL;AAhDyB,CAAL,CAAN,CAA5B;AAyDA,eAAe,SAASC,YAAT,CAAsB;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,MAAZ;AAAoBC,EAAAA,SAApB;AAA+BC,EAAAA,MAA/B;AAAuCC,EAAAA;AAAvC,CAAtB,EAAwE;AAAA;;AACrF,QAAMC,OAAO,GAAGxC,SAAS,EAAzB;AACA,QAAMC,KAAK,GAAGV,QAAQ,EAAtB;AACA,QAAMkD,SAAS,GAAGH,MAAM,GAAG,eAAH,GAAqBI,SAA7C;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCjE,QAAQ,CAAC,EAAD,CAAhD,CAJqF,CAKrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,sBACE;AAAA,2BACE,QAAC,OAAD;AACE,MAAA,EAAE,EAAE8D,SADN;AAEE,MAAA,IAAI,EAAEH,MAFR;AAGE,MAAA,QAAQ,EAAEH,QAHZ;AAIE,MAAA,OAAO,EAAEI,OAJX;AAKE,MAAA,YAAY,EAAE;AACZM,QAAAA,QAAQ,EAAE,QADE;AAEZC,QAAAA,UAAU,EAAE;AAFA,OALhB;AASE,MAAA,eAAe,EAAE;AACfD,QAAAA,QAAQ,EAAE,KADK;AAEfC,QAAAA,UAAU,EAAE;AAFG,OATnB;AAaE,MAAA,OAAO,EAAE;AACPC,QAAAA,KAAK,EAAEP,OAAO,CAACtC;AADR,OAbX;AAAA,6BAiBE;AAAK,QAAA,SAAS,EAAEsC,OAAO,CAAC/B,SAAxB;AAAA,gCACE;AAAK,UAAA,SAAS,EAAE+B,OAAO,CAAC5B,MAAxB;AAAA,kCACE,QAAC,UAAD;AAAY,YAAA,OAAO,EAAC,WAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAK,YAAA,SAAS,EAAE4B,OAAO,CAACzB,WAAxB;AAAA,oCACE,QAAC,SAAD;AACE,cAAA,OAAO,EAAE;AAAEiC,gBAAAA,IAAI,EAAER,OAAO,CAACvB;AAAhB,eADX;AAEE,cAAA,WAAW,EAAC,kBAFd;AAGE,cAAA,KAAK,EAAE0B,YAHT;AAIE,cAAA,QAAQ,EAAEM,KAAK,IAAIL,eAAe,CAACK,KAAK,CAACC,MAAN,CAAaC,KAAd;AAJpC;AAAA;AAAA;AAAA;AAAA,oBADF,eAOE,QAAC,UAAD;AACE,cAAA,QAAQ,EAAC,OADX;AAEE,cAAA,SAAS,EAAElD,KAAK,CAACM,OAAN,CAAc6C,IAAd,CAAmB,GAAnB;AAFb;AAAA;AAAA;AAAA;AAAA,oBAPF;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAgBE,QAAC,IAAD;AAAM,UAAA,KAAK,EAAE,IAAb;AAAmB,UAAA,SAAS,EAAC,KAA7B;AAAmC,UAAA,KAAK,EAAE;AAAEjD,YAAAA,KAAK,EAAE;AAAT;AAA1C;AAAA;AAAA;AAAA;AAAA,gBAhBF,EAuDGwC,YAAY,KAAK,EAAjB,gBACC;AAAA,kCACE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,MAAD;AAAQ,YAAA,IAAI,EAAC,OAAb;AAAqB,YAAA,OAAO,EAAE;AAAEK,cAAAA,IAAI,EAAER,OAAO,CAACX;AAAhB,aAA9B;AAAA,oCACE,QAAC,OAAD;AAAS,cAAA,QAAQ,EAAC;AAAlB;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE,QAAC,UAAD;AAAY,cAAA,OAAO,EAAE;AAAEmB,gBAAAA,IAAI,EAAER,OAAO,CAACT;AAAhB,eAArB;AAAA,mDACU;AAAA,0BAAIY;AAAJ;AAAA;AAAA;AAAA;AAAA,sBADV;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA,wBADD,GAUG,IAjEN;AAAA;AAAA;AAAA;AAAA;AAAA;AAjBF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAyFD;;GAlHuBT,Y;UACNlC,S,EACFT,Q;;;KAFQ2C,Y","sourcesContent":["import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  Popover,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Checkbox,\n  Typography,\n  InputBase,\n  Divider,\n  Button,\n  useTheme\n} from \"@material-ui/core\";\nimport {\n  CheckBoxOutlineBlankOutlined as CheckboxBlankIcon,\n  CheckBoxOutlined as CheckboxIcon,\n  AddOutlined as AddIcon,\n  SearchOutlined as SearchIcon\n} from \"@material-ui/icons\";\n// import { useMutation } from \"urql\";\n// import { createLabel } from \"../../gql\";\n// import { useLabelsStore } from \"../../store\";\n\nconst useStyles = makeStyles(theme => ({\n  popover: {\n    width: theme.spacing(28),\n    borderRadius: theme.spacing(0.5),\n    background: theme.palette.background.default\n  },\n  container: {\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n  header: {\n    padding: theme.spacing(1.5, 1.5, 0, 1.5),\n    marginBottom: theme.spacing(-1)\n  },\n  searchInput: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\"\n  },\n  inputText: {\n    ...theme.custom.fontFamily.roboto,\n    fontWeight: 400,\n    fontSize: \"0.8rem\",\n    flex: 1\n  },\n  listItemIconRoot: {\n    margin: \"0 !important\",\n    padding: \"0 !important\",\n    minWidth: \"0px\"\n  },\n  checkboxRoot: {\n    margin: `${theme.spacing(0.5)}px ${theme.spacing(1)}px ${theme.spacing(\n      0.5\n    )}px ${theme.spacing(1.5)}px !important`,\n    padding: \"0 !important\"\n  },\n  listItemText: {\n    ...theme.custom.fontFamily.roboto,\n    fontWeight: 400,\n    fontSize: \"0.8rem\"\n  },\n  footer: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    padding: theme.spacing(0.8, 1.5, 0.8, 1.5),\n    borderRadius: 0,\n    justifyContent: \"left\"\n  },\n  footerText: {\n    ...theme.custom.fontFamily.roboto,\n    fontWeight: 400,\n    fontSize: \"0.8rem\",\n    paddingLeft: theme.spacing(1),\n    textTransform: \"none\"\n  }\n}));\n\nexport default function LabelPopover({ anchorEl, labels, setLabels, isOpen, onClose }) {\n  const classes = useStyles();\n  const theme = useTheme();\n  const popoverId = isOpen ? \"color-popover\" : undefined;\n  const [newLabelName, setNewLabelName] = useState(\"\");\n  // const [allLabelItems, dispatchLabel] = useLabelsStore();\n  // const filteredLabelItems = allLabelItems.filter(labelItem =>\n  //   newLabelName === \"\" || labelItem.name.includes(newLabelName)\n  // );\n  // const [, createLabelExecute] = useMutation(createLabel);\n  // const updateLabelsForNote = (labelItem) => {\n  //   const updatedLabelIndex = labels.findIndex(selectedLabel => selectedLabel.id === labelItem.id);\n  //   if (updatedLabelIndex > -1) {\n  //     labels.splice(updatedLabelIndex, 1);\n  //   } else {\n  //     labels.push(labelItem);\n  //   }\n  //   setLabels(Object.assign([], labels));\n  // };\n  // const onCreateTodoClick = () => {\n  //   createLabelExecute({ name: newLabelName }).then(({ data }) => {\n  //     dispatchLabel({ type: \"CREATED\", payload: data.createLabel });\n  //   });\n  //   setNewLabelName(\"\");\n  // }\n  return (\n    <div>\n      <Popover\n        id={popoverId}\n        open={isOpen}\n        anchorEl={anchorEl}\n        onClose={onClose}\n        anchorOrigin={{\n          vertical: \"bottom\",\n          horizontal: \"right\"\n        }}\n        transformOrigin={{\n          vertical: \"top\",\n          horizontal: \"left\"\n        }}\n        classes={{\n          paper: classes.popover\n        }}\n      >\n        <div className={classes.container}>\n          <div className={classes.header}>\n            <Typography variant=\"subtitle2\">Label note</Typography>\n            <div className={classes.searchInput}>\n              <InputBase\n                classes={{ root: classes.inputText }}\n                placeholder=\"Enter label name\"\n                value={newLabelName}\n                onChange={event => setNewLabelName(event.target.value)}\n              />\n              <SearchIcon\n                fontSize=\"small\"\n                htmlColor={theme.palette.grey[500]}\n              />\n            </div>\n          </div>\n          <List dense={true} component=\"div\" style={{ width: \"100%\" }}>\n            {/* {filteredLabelItems.map(labelItem => {\n              const labelAriaId = `checkbox-list-label-${labelItem.id}`;\n\n              return (\n                <ListItem\n                  alignItems=\"flex-start\"\n                  key={labelItem.id}\n                  dense={true}\n                  button={true}\n                  disableGutters={true}\n                  classes={{ root: classes.listItemIconRoot }}\n                  onClick={() => updateLabelsForNote(labelItem)}\n                >\n                  <ListItemIcon classes={{ root: classes.listItemIconRoot }}>\n                    <Checkbox\n                      tabIndex={-1}\n                      icon={<CheckboxBlankIcon fontSize=\"small\" />}\n                      checkedIcon={<CheckboxIcon fontSize=\"small\" />}\n                      color=\"default\"\n                      disableRipple\n                      checked={labels.some((label) => label.id === labelItem.id)}\n                      inputProps={{ \"aria-labelledby\": labelAriaId }}\n                      size=\"small\"\n                      classes={{ root: classes.checkboxRoot }}\n                    />\n                  </ListItemIcon>\n                  <ListItemText id={labelItem.id} disableTypography>\n                    <Typography\n                      variant=\"body1\"\n                      classes={{ root: classes.listItemText }}\n                    >\n                      {labelItem.name}\n                    </Typography>\n                  </ListItemText>\n                </ListItem>\n              );\n            })} */}\n          </List>\n          {newLabelName !== \"\" ? (\n            <>\n              <Divider />\n              <Button size=\"small\" classes={{ root: classes.footer }}>\n                <AddIcon fontSize=\"small\" />\n                <Typography classes={{ root: classes.footerText }}>\n                  Create \"<b>{newLabelName}</b>\"\n                </Typography>\n              </Button>\n            </>\n          ) : null}\n        </div>\n      </Popover>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}