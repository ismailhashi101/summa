{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/ismailhashi/Projects/summarizer/frontend/src/views/Home/components/MainArea/TodoItem.js\";\nimport React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Paper, Fade, ClickAwayListener, useTheme } from '@material-ui/core';\nimport ActionsBar from \"../Todo/Actions\";\nimport LabelsBar from \"../Todo/Labels\";\nimport ContentTitle from \"../Todo/ContentTitle\";\nimport Content from \"../Todo/Content\";\nconst useStyles = makeStyles(theme => ({\n  wrapper: {\n    display: 'flex',\n    flexDirection: 'column',\n    borderColor: theme.custom.palette.itemBorderColor,\n    borderWidth: theme.spacing(0.1),\n    borderStyle: 'solid'\n  },\n  textTitle: { ...theme.custom.fontFamily.metropolis,\n    padding: theme.spacing(1.5, 2, 0, 2),\n    fontWeight: 500,\n    fontSize: '1rem',\n    color: theme.palette.text.primary,\n    lineHeight: theme.spacing(0.18)\n  },\n  barWrapper: {\n    display: 'flex',\n    flexDirection: 'row',\n    padding: theme.spacing(1, 2),\n    justifyContent: 'space-between'\n  }\n}));\nexport default function ({\n  noteItem,\n  isEditMode\n}) {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [isHovered, setHovered] = useState(false);\n  const [title, setTitle] = useState(noteItem.title);\n  const [noteinputs, setNotes] = useState(noteItem.notes);\n  const [color, setColor] = useState(noteItem.color);\n  const [isCheckboxMode, setCheckboxMode] = useState(noteItem.isCheckboxMode);\n  const [labels, setLabels] = useState(noteItem.labels); //const [, { setNoteInEditMode }] = null;\n  // //graph QL shit\n  // const [, dispatchTodo] = null;\n  // const [, updateTodoExecute] = null;\n\n  const updateColor = color => {\n    setColor(color); //updateTodoItem({ color })\n  };\n\n  const updateLabels = labels => {\n    setLabels(labels); //updateTodoItem({ labels: labels.map((label) => label.id) })\n  };\n\n  const updateCheckboxMode = isCheckboxMode => {\n    setCheckboxMode(isCheckboxMode); //updateTodoItem({ isCheckboxMode })\n  }; // const onAfterEdit = () => {\n  //   //updateTodoItem({});\n  //   setNoteInEditMode(\"\")\n  // }\n  // const updateTodoItem = (todoItem) => {\n  //   updateTodoExecute({\n  //     id: noteItem.id,\n  //     title: todoItem.title || title,\n  //     notes: todoItem.notes || noteinputs.map((note) => { return { text: note.text, isCompleted: note.isCompleted } }),\n  //     color: todoItem.color || color,\n  //     isCheckboxMode: todoItem.isCheckboxMode || isCheckboxMode,\n  //     labels: todoItem.labels || labels.map((label) => label.id)\n  //   }).then(({ data }) => {\n  //     dispatchTodo({ type: \"UPDATED\", payload: data.updateTodo });\n  //   });\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    onMouseOver: () => setHovered(true),\n    onMouseLeave: () => setHovered(false),\n    className: classes.wrapper,\n    elevation: isHovered || isEditMode ? 2 : 0,\n    style: {\n      backgroundColor: theme.custom.palette.noteBackground[color]\n    },\n    children: [/*#__PURE__*/_jsxDEV(ClickAwayListener, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(ContentTitle, {\n          title: title,\n          setTitle: setTitle,\n          isEditMode: isEditMode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Content, {\n          notes: noteinputs,\n          setNotes: setNotes,\n          isEditMode: isEditMode,\n          isCheckboxMode: isCheckboxMode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Fade, {\n      in: isHovered || isEditMode,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.barWrapper,\n        children: /*#__PURE__*/_jsxDEV(ActionsBar, {\n          id: noteItem.id,\n          color: color,\n          setColor: updateColor,\n          labels: labels,\n          setLabels: updateLabels,\n          setCheckboxMode: updateCheckboxMode,\n          isCreateMode: false,\n          isCheckboxMode: isCheckboxMode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/Users/ismailhashi/Projects/summarizer/frontend/src/views/Home/components/MainArea/TodoItem.js"],"names":["React","useState","makeStyles","Paper","Fade","ClickAwayListener","useTheme","ActionsBar","LabelsBar","ContentTitle","Content","useStyles","theme","wrapper","display","flexDirection","borderColor","custom","palette","itemBorderColor","borderWidth","spacing","borderStyle","textTitle","fontFamily","metropolis","padding","fontWeight","fontSize","color","text","primary","lineHeight","barWrapper","justifyContent","noteItem","isEditMode","classes","isHovered","setHovered","title","setTitle","noteinputs","setNotes","notes","setColor","isCheckboxMode","setCheckboxMode","labels","setLabels","updateColor","updateLabels","updateCheckboxMode","backgroundColor","noteBackground","id"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,KAAT,EAAgBC,IAAhB,EAAsBC,iBAAtB,EAAyCC,QAAzC,QAAyD,mBAAzD;AAEA,OAAOC,UAAP,MAAuB,iBAAvB;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AACA,OAAOC,YAAP,MAAyB,sBAAzB;AACA,OAAOC,OAAP,MAAoB,iBAApB;AAEA,MAAMC,SAAS,GAAGT,UAAU,CAACU,KAAK,KAAK;AACrCC,EAAAA,OAAO,EAAE;AACPC,IAAAA,OAAO,EAAE,MADF;AAEPC,IAAAA,aAAa,EAAE,QAFR;AAGPC,IAAAA,WAAW,EAAEJ,KAAK,CAACK,MAAN,CAAaC,OAAb,CAAqBC,eAH3B;AAIPC,IAAAA,WAAW,EAAER,KAAK,CAACS,OAAN,CAAc,GAAd,CAJN;AAKPC,IAAAA,WAAW,EAAE;AALN,GAD4B;AAQrCC,EAAAA,SAAS,EAAE,EACT,GAAGX,KAAK,CAACK,MAAN,CAAaO,UAAb,CAAwBC,UADlB;AAETC,IAAAA,OAAO,EAAEd,KAAK,CAACS,OAAN,CAAc,GAAd,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CAFA;AAGTM,IAAAA,UAAU,EAAE,GAHH;AAITC,IAAAA,QAAQ,EAAE,MAJD;AAKTC,IAAAA,KAAK,EAAEjB,KAAK,CAACM,OAAN,CAAcY,IAAd,CAAmBC,OALjB;AAMTC,IAAAA,UAAU,EAAEpB,KAAK,CAACS,OAAN,CAAc,IAAd;AANH,GAR0B;AAgBrCY,EAAAA,UAAU,EAAE;AACVnB,IAAAA,OAAO,EAAE,MADC;AAEVC,IAAAA,aAAa,EAAE,KAFL;AAGVW,IAAAA,OAAO,EAAEd,KAAK,CAACS,OAAN,CAAc,CAAd,EAAiB,CAAjB,CAHC;AAIVa,IAAAA,cAAc,EAAE;AAJN;AAhByB,CAAL,CAAN,CAA5B;AAwBA,eAAe,UAAS;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAT,EAAmC;AAChD,QAAMC,OAAO,GAAG1B,SAAS,EAAzB;AACA,QAAMC,KAAK,GAAGN,QAAQ,EAAtB;AACA,QAAM,CAACgC,SAAD,EAAYC,UAAZ,IAA0BtC,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACuC,KAAD,EAAQC,QAAR,IAAoBxC,QAAQ,CAACkC,QAAQ,CAACK,KAAV,CAAlC;AACA,QAAM,CAACE,UAAD,EAAaC,QAAb,IAAyB1C,QAAQ,CAACkC,QAAQ,CAACS,KAAV,CAAvC;AACA,QAAM,CAACf,KAAD,EAAQgB,QAAR,IAAoB5C,QAAQ,CAACkC,QAAQ,CAACN,KAAV,CAAlC;AACA,QAAM,CAACiB,cAAD,EAAiBC,eAAjB,IAAoC9C,QAAQ,CAACkC,QAAQ,CAACW,cAAV,CAAlD;AACA,QAAM,CAACE,MAAD,EAASC,SAAT,IAAsBhD,QAAQ,CAACkC,QAAQ,CAACa,MAAV,CAApC,CARgD,CAUhD;AAEA;AACA;AACA;;AAEA,QAAME,WAAW,GAAGrB,KAAK,IAAI;AAC3BgB,IAAAA,QAAQ,CAAChB,KAAD,CAAR,CAD2B,CAE3B;AACD,GAHD;;AAKA,QAAMsB,YAAY,GAAGH,MAAM,IAAI;AAC7BC,IAAAA,SAAS,CAACD,MAAD,CAAT,CAD6B,CAE7B;AACD,GAHD;;AAKA,QAAMI,kBAAkB,GAAGN,cAAc,IAAI;AAC3CC,IAAAA,eAAe,CAACD,cAAD,CAAf,CAD2C,CAE3C;AACD,GAHD,CA1BgD,CA+BhD;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,sBACE,QAAC,KAAD;AACE,IAAA,WAAW,EAAE,MAAMP,UAAU,CAAC,IAAD,CAD/B;AAEE,IAAA,YAAY,EAAE,MAAMA,UAAU,CAAC,KAAD,CAFhC;AAGE,IAAA,SAAS,EAAEF,OAAO,CAACxB,OAHrB;AAIE,IAAA,SAAS,EAAEyB,SAAS,IAAIF,UAAb,GAA0B,CAA1B,GAA8B,CAJ3C;AAKE,IAAA,KAAK,EAAE;AAAEiB,MAAAA,eAAe,EAAEzC,KAAK,CAACK,MAAN,CAAaC,OAAb,CAAqBoC,cAArB,CAAoCzB,KAApC;AAAnB,KALT;AAAA,4BAME,QAAC,iBAAD;AAAA,6BACE;AAAA,gCACE,QAAC,YAAD;AACE,UAAA,KAAK,EAAEW,KADT;AAEE,UAAA,QAAQ,EAAEC,QAFZ;AAGE,UAAA,UAAU,EAAEL;AAHd;AAAA;AAAA;AAAA;AAAA,gBADF,eAME,QAAC,OAAD;AACE,UAAA,KAAK,EAAEM,UADT;AAEE,UAAA,QAAQ,EAAEC,QAFZ;AAGE,UAAA,UAAU,EAAEP,UAHd;AAIE,UAAA,cAAc,EAAEU;AAJlB;AAAA;AAAA;AAAA;AAAA,gBANF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YANF,eAyBE,QAAC,IAAD;AAAM,MAAA,EAAE,EAAER,SAAS,IAAIF,UAAvB;AAAA,6BACE;AAAK,QAAA,SAAS,EAAEC,OAAO,CAACJ,UAAxB;AAAA,+BACE,QAAC,UAAD;AACE,UAAA,EAAE,EAAEE,QAAQ,CAACoB,EADf;AAEE,UAAA,KAAK,EAAE1B,KAFT;AAGE,UAAA,QAAQ,EAAEqB,WAHZ;AAIE,UAAA,MAAM,EAAEF,MAJV;AAKE,UAAA,SAAS,EAAEG,YALb;AAME,UAAA,eAAe,EAAEC,kBANnB;AAOE,UAAA,YAAY,EAAE,KAPhB;AAQE,UAAA,cAAc,EAAEN;AARlB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAzBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA0CD","sourcesContent":["import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Paper, Fade, ClickAwayListener, useTheme } from '@material-ui/core';\n\nimport ActionsBar from \"../Todo/Actions\";\nimport LabelsBar from \"../Todo/Labels\";\nimport ContentTitle from \"../Todo/ContentTitle\";\nimport Content from \"../Todo/Content\";\n\nconst useStyles = makeStyles(theme => ({\n  wrapper: {\n    display: 'flex',\n    flexDirection: 'column',\n    borderColor: theme.custom.palette.itemBorderColor,\n    borderWidth: theme.spacing(0.1),\n    borderStyle: 'solid'\n  },\n  textTitle: {\n    ...theme.custom.fontFamily.metropolis,\n    padding: theme.spacing(1.5, 2, 0, 2),\n    fontWeight: 500,\n    fontSize: '1rem',\n    color: theme.palette.text.primary,\n    lineHeight: theme.spacing(0.18)\n  },\n  barWrapper: {\n    display: 'flex',\n    flexDirection: 'row',\n    padding: theme.spacing(1, 2),\n    justifyContent: 'space-between'\n  }\n}));\n\nexport default function({ noteItem, isEditMode }) {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [isHovered, setHovered] = useState(false);\n  const [title, setTitle] = useState(noteItem.title);\n  const [noteinputs, setNotes] = useState(noteItem.notes);\n  const [color, setColor] = useState(noteItem.color);\n  const [isCheckboxMode, setCheckboxMode] = useState(noteItem.isCheckboxMode);\n  const [labels, setLabels] = useState(noteItem.labels);\n\n  //const [, { setNoteInEditMode }] = null;\n\n  // //graph QL shit\n  // const [, dispatchTodo] = null;\n  // const [, updateTodoExecute] = null;\n\n  const updateColor = color => {\n    setColor(color);\n    //updateTodoItem({ color })\n  };\n\n  const updateLabels = labels => {\n    setLabels(labels);\n    //updateTodoItem({ labels: labels.map((label) => label.id) })\n  };\n\n  const updateCheckboxMode = isCheckboxMode => {\n    setCheckboxMode(isCheckboxMode);\n    //updateTodoItem({ isCheckboxMode })\n  };\n\n  // const onAfterEdit = () => {\n  //   //updateTodoItem({});\n  //   setNoteInEditMode(\"\")\n  // }\n\n  // const updateTodoItem = (todoItem) => {\n  //   updateTodoExecute({\n  //     id: noteItem.id,\n  //     title: todoItem.title || title,\n  //     notes: todoItem.notes || noteinputs.map((note) => { return { text: note.text, isCompleted: note.isCompleted } }),\n  //     color: todoItem.color || color,\n  //     isCheckboxMode: todoItem.isCheckboxMode || isCheckboxMode,\n  //     labels: todoItem.labels || labels.map((label) => label.id)\n  //   }).then(({ data }) => {\n  //     dispatchTodo({ type: \"UPDATED\", payload: data.updateTodo });\n  //   });\n  // }\n\n  return (\n    <Paper\n      onMouseOver={() => setHovered(true)}\n      onMouseLeave={() => setHovered(false)}\n      className={classes.wrapper}\n      elevation={isHovered || isEditMode ? 2 : 0}\n      style={{ backgroundColor: theme.custom.palette.noteBackground[color] }}>\n      <ClickAwayListener>\n        <div>\n          <ContentTitle\n            title={title}\n            setTitle={setTitle}\n            isEditMode={isEditMode}\n          />\n          <Content\n            notes={noteinputs}\n            setNotes={setNotes}\n            isEditMode={isEditMode}\n            isCheckboxMode={isCheckboxMode}\n          />\n        </div>\n      </ClickAwayListener>\n\n      {/*fix*/}\n      {/* <LabelsBar labels={labels} /> */}\n\n      <Fade in={isHovered || isEditMode}>\n        <div className={classes.barWrapper}>\n          <ActionsBar\n            id={noteItem.id}\n            color={color}\n            setColor={updateColor}\n            labels={labels}\n            setLabels={updateLabels}\n            setCheckboxMode={updateCheckboxMode}\n            isCreateMode={false}\n            isCheckboxMode={isCheckboxMode}\n          />\n        </div>\n      </Fade>\n    </Paper>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}