{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/ismailhashi/Projects/summarizer/frontend/src/views/Home/components/MainArea/TodoCreate.js\";\nimport React, { useState } from 'react';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport { Paper, InputBase, Collapse, Button } from '@material-ui/core';\nconst useStyles = makeStyles(theme => ({\n  paperWrapper: {\n    transition: theme.transitions.create('all', {\n      easing: theme.transitions.easing.easeIn,\n      duration: theme.transitions.duration.short\n    }),\n    borderColor: theme.custom.palette.itemBorderColor,\n    borderWidth: theme.spacing(0.1),\n    borderStyle: 'solid'\n  },\n  wrapper: {\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  inputTitleRoot: { ...theme.custom.fontFamily.metropolis,\n    padding: theme.spacing(1.25, 2)\n  },\n  inputTitleInput: {\n    fontWeight: 500,\n    fontSize: '1rem',\n    padding: 0,\n    lineHeight: '1rem',\n    verticalAlign: 'middle',\n    color: theme.palette.text.primary\n  },\n  inputNoteRoot: { ...theme.custom.fontFamily.roboto,\n    padding: theme.spacing(1.5, 2)\n  },\n  inputNoteInput: {\n    fontWeight: 500,\n    fontSize: '0.85rem',\n    padding: 0,\n    color: theme.palette.text.primary\n  },\n  barWrapper: {\n    display: 'flex',\n    flexDirection: 'row',\n    padding: theme.spacing(1, 2),\n    justifyContent: 'space-between'\n  }\n}));\nexport default function () {\n  const classes = useStyles();\n  const theme = useTheme(); //const [, createTodoExecute] = useMutation(createTodo);\n\n  const [isFocussed, setFocussed] = useState(false);\n  const [title, setTitle] = useState('');\n  const [notes, setNotes] = useState([]);\n  const [color, setColor] = useState('default');\n  const [isCheckboxMode, setCheckboxMode] = useState(false);\n  const [labels, setLabels] = useState([]); //const [, dispatchTodo] = useTodosStore();\n\n  const onCloseClick = () => {\n    const noteTexts = notes.map(noteItem => noteItem.text);\n    const labelIds = labels.map(labelItem => labelItem.id);\n\n    if (title || noteTexts.length > 0) {// createTodoExecute({ title, notes: noteTexts, labels: labelIds, color, isCheckboxMode }).then(({ data }) => {\n      //   dispatchTodo({ type: \"CREATED\", payload: data.createTodo });\n      // });\n    }\n\n    setTitle('');\n    setNotes([]);\n    setColor('default');\n    setCheckboxMode(false);\n    setLabels([]);\n    setFocussed(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    elevation: 2,\n    classes: {\n      root: classes.paperWrapper\n    },\n    style: {\n      backgroundColor: theme.custom.palette.noteBackground[color]\n    },\n    children: /*#__PURE__*/_jsxDEV(Collapse, {\n      classes: {\n        wrapperInner: classes.wrapper\n      },\n      in: isFocussed,\n      collapsedHeight: \"5.7rem\",\n      children: [/*#__PURE__*/_jsxDEV(InputBase, {\n        placeholder: isFocussed ? 'Title' : 'Take a note...',\n        classes: {\n          root: isFocussed ? classes.inputTitleRoot : classes.inputNoteRoot,\n          input: classes.inputTitleInput\n        },\n        onFocus: () => setFocussed(true),\n        inputProps: {\n          'aria-label': 'note title'\n        },\n        value: title,\n        onChange: event => setTitle(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), isFocussed ? /*#__PURE__*/_jsxDEV(TodoContent, {\n        notes: notes,\n        setNotes: setNotes,\n        isEditMode: true,\n        isCheckboxMode: isCheckboxMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.barWrapper,\n        children: [/*#__PURE__*/_jsxDEV(TodoActions, {\n          id: '',\n          color: color,\n          setColor: setColor,\n          labels: labels,\n          setLabels: setLabels,\n          setCheckboxMode: setCheckboxMode,\n          isCreateMode: true,\n          isCheckboxMode: isCheckboxMode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            size: \"small\",\n            onClick: onCloseClick,\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/Users/ismailhashi/Projects/summarizer/frontend/src/views/Home/components/MainArea/TodoCreate.js"],"names":["React","useState","makeStyles","useTheme","Paper","InputBase","Collapse","Button","useStyles","theme","paperWrapper","transition","transitions","create","easing","easeIn","duration","short","borderColor","custom","palette","itemBorderColor","borderWidth","spacing","borderStyle","wrapper","display","flexDirection","inputTitleRoot","fontFamily","metropolis","padding","inputTitleInput","fontWeight","fontSize","lineHeight","verticalAlign","color","text","primary","inputNoteRoot","roboto","inputNoteInput","barWrapper","justifyContent","classes","isFocussed","setFocussed","title","setTitle","notes","setNotes","setColor","isCheckboxMode","setCheckboxMode","labels","setLabels","onCloseClick","noteTexts","map","noteItem","labelIds","labelItem","id","length","root","backgroundColor","noteBackground","wrapperInner","input","event","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport { Paper, InputBase, Collapse, Button } from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => ({\n  paperWrapper: {\n    transition: theme.transitions.create('all', {\n      easing: theme.transitions.easing.easeIn,\n      duration: theme.transitions.duration.short\n    }),\n    borderColor: theme.custom.palette.itemBorderColor,\n    borderWidth: theme.spacing(0.1),\n    borderStyle: 'solid'\n  },\n  wrapper: {\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  inputTitleRoot: {\n    ...theme.custom.fontFamily.metropolis,\n    padding: theme.spacing(1.25, 2)\n  },\n  inputTitleInput: {\n    fontWeight: 500,\n    fontSize: '1rem',\n    padding: 0,\n    lineHeight: '1rem',\n    verticalAlign: 'middle',\n    color: theme.palette.text.primary\n  },\n  inputNoteRoot: {\n    ...theme.custom.fontFamily.roboto,\n    padding: theme.spacing(1.5, 2)\n  },\n  inputNoteInput: {\n    fontWeight: 500,\n    fontSize: '0.85rem',\n    padding: 0,\n    color: theme.palette.text.primary\n  },\n  barWrapper: {\n    display: 'flex',\n    flexDirection: 'row',\n    padding: theme.spacing(1, 2),\n    justifyContent: 'space-between'\n  }\n}));\n\nexport default function() {\n  const classes = useStyles();\n  const theme = useTheme();\n  //const [, createTodoExecute] = useMutation(createTodo);\n  const [isFocussed, setFocussed] = useState(false);\n  const [title, setTitle] = useState('');\n  const [notes, setNotes] = useState([]);\n  const [color, setColor] = useState('default');\n  const [isCheckboxMode, setCheckboxMode] = useState(false);\n  const [labels, setLabels] = useState([]);\n  //const [, dispatchTodo] = useTodosStore();\n  const onCloseClick = () => {\n    const noteTexts = notes.map(noteItem => noteItem.text);\n    const labelIds = labels.map(labelItem => labelItem.id);\n    if (title || noteTexts.length > 0) {\n      // createTodoExecute({ title, notes: noteTexts, labels: labelIds, color, isCheckboxMode }).then(({ data }) => {\n      //   dispatchTodo({ type: \"CREATED\", payload: data.createTodo });\n      // });\n    }\n    setTitle('');\n    setNotes([]);\n    setColor('default');\n    setCheckboxMode(false);\n    setLabels([]);\n    setFocussed(false);\n  };\n\n  return (\n    <Paper\n      elevation={2}\n      classes={{ root: classes.paperWrapper }}\n      style={{ backgroundColor: theme.custom.palette.noteBackground[color] }}>\n      <Collapse\n        classes={{ wrapperInner: classes.wrapper }}\n        in={isFocussed}\n        collapsedHeight=\"5.7rem\">\n        <InputBase\n          placeholder={isFocussed ? 'Title' : 'Take a note...'}\n          classes={{\n            root: isFocussed ? classes.inputTitleRoot : classes.inputNoteRoot,\n            input: classes.inputTitleInput\n          }}\n          onFocus={() => setFocussed(true)}\n          inputProps={{ 'aria-label': 'note title' }}\n          value={title}\n          onChange={event => setTitle(event.target.value)}\n        />\n        {isFocussed ? (\n          <TodoContent\n            notes={notes}\n            setNotes={setNotes}\n            isEditMode={true}\n            isCheckboxMode={isCheckboxMode}\n          />\n        ) : null}\n        <div className={classes.barWrapper}>\n          <TodoActions\n            id={''}\n            color={color}\n            setColor={setColor}\n            labels={labels}\n            setLabels={setLabels}\n            setCheckboxMode={setCheckboxMode}\n            isCreateMode={true}\n            isCheckboxMode={isCheckboxMode}\n          />\n          <div>\n            <Button size=\"small\" onClick={onCloseClick}>\n              Close\n            </Button>\n          </div>\n        </div>\n      </Collapse>\n    </Paper>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}