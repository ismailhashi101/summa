{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { InputBase, Typography } from \"@material-ui/core\";\nconst useStyles = makeStyles(theme => ({\n  optionsWrapper: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\"\n  },\n  optionWrapperFirst: {\n    padding: theme.spacing(0, 1, 0, 0)\n  },\n  optionWrapperLast: {\n    padding: theme.spacing(0, 0, 0, 1)\n  },\n  optionWrapper: {\n    padding: theme.spacing(0, 1)\n  },\n  barClose: {},\n  inputNoteRoot: { ...theme.custom.fontFamily.roboto,\n    padding: theme.spacing(0.5, 2, 1.5, 2)\n  },\n  inputNoteInput: {\n    fontWeight: 400,\n    fontSize: \"0.88rem\",\n    padding: 0,\n    color: theme.palette.text.primary\n  },\n  textContainer: {\n    padding: theme.spacing(0.5, 2, 1.5, 2)\n  },\n  textNote: { ...theme.custom.fontFamily.roboto,\n    fontWeight: 400,\n    fontSize: \"0.88rem\",\n    color: theme.palette.text.primary\n  }\n}));\nexport default function ({\n  notes,\n  setNotes,\n  isEditMode\n}) {\n  console.log(notes);\n  const classes = useStyles(); //const reducedText = notes.map(({ text }) => text).join(\"\\n\");\n\n  const onTextChanged = event => {\n    const text = event.target.value;\n    const textParts = text.split(\"\\n\").map(text => ({\n      text: text,\n      isCompleted: false\n    }));\n    setNotes(textParts);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}","map":{"version":3,"sources":["/Users/ismailhashi/Projects/summarizer/frontend/src/views/Home/components/Todo/ContentText.js"],"names":["React","makeStyles","InputBase","Typography","useStyles","theme","optionsWrapper","display","flexDirection","justifyContent","optionWrapperFirst","padding","spacing","optionWrapperLast","optionWrapper","barClose","inputNoteRoot","custom","fontFamily","roboto","inputNoteInput","fontWeight","fontSize","color","palette","text","primary","textContainer","textNote","notes","setNotes","isEditMode","console","log","classes","onTextChanged","event","target","value","textParts","split","map","isCompleted"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,mBAAtC;AAEA,MAAMC,SAAS,GAAGH,UAAU,CAAEI,KAAD,KAAY;AACvCC,EAAAA,cAAc,EAAE;AACdC,IAAAA,OAAO,EAAE,MADK;AAEdC,IAAAA,aAAa,EAAE,KAFD;AAGdC,IAAAA,cAAc,EAAE;AAHF,GADuB;AAMvCC,EAAAA,kBAAkB,EAAE;AAClBC,IAAAA,OAAO,EAAEN,KAAK,CAACO,OAAN,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB;AADS,GANmB;AASvCC,EAAAA,iBAAiB,EAAE;AACjBF,IAAAA,OAAO,EAAEN,KAAK,CAACO,OAAN,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB;AADQ,GAToB;AAYvCE,EAAAA,aAAa,EAAE;AACbH,IAAAA,OAAO,EAAEN,KAAK,CAACO,OAAN,CAAc,CAAd,EAAiB,CAAjB;AADI,GAZwB;AAevCG,EAAAA,QAAQ,EAAE,EAf6B;AAgBvCC,EAAAA,aAAa,EAAE,EACb,GAAGX,KAAK,CAACY,MAAN,CAAaC,UAAb,CAAwBC,MADd;AAEbR,IAAAA,OAAO,EAAEN,KAAK,CAACO,OAAN,CAAc,GAAd,EAAmB,CAAnB,EAAsB,GAAtB,EAA2B,CAA3B;AAFI,GAhBwB;AAoBvCQ,EAAAA,cAAc,EAAE;AACdC,IAAAA,UAAU,EAAE,GADE;AAEdC,IAAAA,QAAQ,EAAE,SAFI;AAGdX,IAAAA,OAAO,EAAE,CAHK;AAIdY,IAAAA,KAAK,EAAElB,KAAK,CAACmB,OAAN,CAAcC,IAAd,CAAmBC;AAJZ,GApBuB;AA0BvCC,EAAAA,aAAa,EAAE;AACbhB,IAAAA,OAAO,EAAEN,KAAK,CAACO,OAAN,CAAc,GAAd,EAAmB,CAAnB,EAAsB,GAAtB,EAA2B,CAA3B;AADI,GA1BwB;AA6BvCgB,EAAAA,QAAQ,EAAE,EACR,GAAGvB,KAAK,CAACY,MAAN,CAAaC,UAAb,CAAwBC,MADnB;AAERE,IAAAA,UAAU,EAAE,GAFJ;AAGRC,IAAAA,QAAQ,EAAE,SAHF;AAIRC,IAAAA,KAAK,EAAElB,KAAK,CAACmB,OAAN,CAAcC,IAAd,CAAmBC;AAJlB;AA7B6B,CAAZ,CAAD,CAA5B;AAqCA,eAAe,UAAU;AAAEG,EAAAA,KAAF;AAASC,EAAAA,QAAT;AAAmBC,EAAAA;AAAnB,CAAV,EAA2C;AACxDC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACA,QAAMK,OAAO,GAAG9B,SAAS,EAAzB,CAFwD,CAGxD;;AAEA,QAAM+B,aAAa,GAAIC,KAAD,IAAW;AAC/B,UAAMX,IAAI,GAAGW,KAAK,CAACC,MAAN,CAAaC,KAA1B;AACA,UAAMC,SAAS,GAAGd,IAAI,CACnBe,KADe,CACT,IADS,EAEfC,GAFe,CAEVhB,IAAD,KAAW;AAAEA,MAAAA,IAAI,EAAEA,IAAR;AAAciB,MAAAA,WAAW,EAAE;AAA3B,KAAX,CAFW,CAAlB;AAGAZ,IAAAA,QAAQ,CAACS,SAAD,CAAR;AACD,GAND;;AAQA,sBACE,qCADF;AA6BD","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { InputBase, Typography } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  optionsWrapper: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n  },\n  optionWrapperFirst: {\n    padding: theme.spacing(0, 1, 0, 0),\n  },\n  optionWrapperLast: {\n    padding: theme.spacing(0, 0, 0, 1),\n  },\n  optionWrapper: {\n    padding: theme.spacing(0, 1),\n  },\n  barClose: {},\n  inputNoteRoot: {\n    ...theme.custom.fontFamily.roboto,\n    padding: theme.spacing(0.5, 2, 1.5, 2),\n  },\n  inputNoteInput: {\n    fontWeight: 400,\n    fontSize: \"0.88rem\",\n    padding: 0,\n    color: theme.palette.text.primary,\n  },\n  textContainer: {\n    padding: theme.spacing(0.5, 2, 1.5, 2),\n  },\n  textNote: {\n    ...theme.custom.fontFamily.roboto,\n    fontWeight: 400,\n    fontSize: \"0.88rem\",\n    color: theme.palette.text.primary,\n  },\n}));\n\nexport default function ({ notes, setNotes, isEditMode }) {\n  console.log(notes);\n  const classes = useStyles();\n  //const reducedText = notes.map(({ text }) => text).join(\"\\n\");\n\n  const onTextChanged = (event) => {\n    const text = event.target.value;\n    const textParts = text\n      .split(\"\\n\")\n      .map((text) => ({ text: text, isCompleted: false }));\n    setNotes(textParts);\n  };\n\n  return (\n    <>\n      {/* {isEditMode ? (\n        <InputBase\n          placeholder=\"Take a note...\"\n          classes={{\n            root: classes.inputNoteRoot,\n            input: classes.inputNoteInput,\n          }}\n          inputProps={{ \"aria-label\": \"take a note\" }}\n          value={reducedText}\n          onChange={onTextChanged}\n          multiline={true}\n        />\n      ) : (\n        <div className={classes.textContainer}>\n          {notes.map(({ text }, index) => (\n            <Typography\n              key={index}\n              className={classes.textNote}\n              variant=\"body1\"\n            >\n              {text}\n            </Typography>\n          ))}\n        </div>\n      )} */}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}